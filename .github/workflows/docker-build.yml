name: docker-build

on:
    workflow_call:
      inputs: 
        binary:
          description: "Name of the binary"
          required: true
          type: string
        build_command:
          description: "Build command"
          required: true
          type: string
        build_tags:
          description: "Build tags"
          required: true
          type: string
        chain_registry_name:
          description: "Name of the application"
          required: true
          type: string
        cosmos_build_options:
          description: "Cosmos build options"
          required: true
          type: string
        go_version:
          description: "Go version"
          required: true
          type: string
        ldflags:
          description: "Ldflags"
          required: true
          type: string
        mimalloc_version:
          description: "Mimalloc version"
          required: true
          type: string
        name:
          description: "Name of the application"
          required: true
          type: string
        os:
          description: "OS"
          required: true
          type: string
        os_version:
          description: "Alpine version"
          required: true
          type: string
        platform:
          description: "Platform"
          required: true
          type: string
        repo:
          description: "Repo"
          required: true
          type: string
        target:
          description: "Target"
          required: true
          type: string
        version:
          description: "Version"
          required: true
          type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/docker/login-action
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            ghcr.io/${{ github.repository }}/${{ inputs.name }}
            ${{ secrets.DOCKERHUB_USER }}/${{ inputs.name }}
          tags: |
            type=sha
            type=raw,value=${{ inputs.version }},enable={{ is_default_branch }}
            type=raw,value=${{ inputs.version }}-${{ inputs.os }}${{ inputs.os_version }},enable={{ is_default_branch }}

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          target: ${{ inputs.target }}
          file: ./${{ inputs.os }}.Dockerfile
          platforms: ${{ inputs.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_METADATA_OUTPUT_TAGS }}
          labels: ${{ env.DOCKER_METADATA_OUTPUT_LABELS }}
          build-args: |
            APP_NAME=${{ inputs.name }}
            BIN_NAME=${{ inputs.binary }}
            BUILD_COMMAND=${{ inputs.build_command }}
            BUILDPLATFORM=${{ inputs.platform }}
            BUILD_TAGS=${{ inputs.build_tags }}
            CHAIN_REGISTRY_NAME=${{ inputs.chain_registry_name }}
            COSMOS_BUILD_OPTIONS=${{ inputs.cosmos_build_options }}
            GIT_TAG=v${{ inputs.version }}
            GIT_REPO=${{ inputs.repo }}
            GO_VERSION=${{ inputs.go_version }}
            LDFLAGS=${{ inputs.ldflags }}
            MIMALLOC_VERSION=${{ inputs.mimalloc_version }}
            OS_VERSION=${{ inputs.os_version }}
